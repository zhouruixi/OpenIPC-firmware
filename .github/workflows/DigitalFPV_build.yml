name: DigitalFPV_build

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  TAG_NAME: ${{ github.event.release.tag_name }}

jobs:
  buildroot:
    name: Firmware
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          # FPV
          - ssc30kq_fpv
          - ssc338q_fpv
          - ssc378qe_fpv

          # DigitalFPV
          - ssc30kq_digitalfpv
          - ssc338q_digitalfpv
          - ssc378qe_digitalfpv

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Prepare firmware
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
          echo CACHE_DATE=$(date +%m) >> ${GITHUB_ENV}

      - name: Setup ccache
        if: github.event_name != 'pull_request'
        uses: actions/cache@v4
        with:
          path: /tmp/ccache
          key: ${{matrix.platform}}-${{env.CACHE_DATE}}

      - name: Restore ccache
        if: github.event_name == 'pull_request'
        uses: actions/cache/restore@v4
        with:
          path: /tmp/ccache
          key: ${{matrix.platform}}-${{env.CACHE_DATE}}

      - name: Build firmware
        run: |
          export GIT_HASH=$(git rev-parse --short ${GITHUB_SHA})
          export GIT_BRANCH=${GITHUB_REF_NAME}
          echo GIT_HASH=${GIT_HASH} >> ${GITHUB_ENV}
          echo GIT_BRANCH=${GIT_BRANCH} >> ${GITHUB_ENV}

          mkdir -p /tmp/ccache
          ln -s /tmp/ccache ${HOME}/.ccache
          make BOARD=${{matrix.platform}}

          TIME=$(date -d @${SECONDS} +%M:%S)
          echo TIME=${TIME} >> ${GITHUB_ENV}

          OUTPUT_NORFW=$(find output/images -name openipc*nor*)
          if [ -e ${OUTPUT_NORFW} ]; then
            [ -z "${TAG_NAME}" ] && TAG_NAME=$(git rev-parse --short HEAD)
            NORFW=${OUTPUT_NORFW%.tgz}_${TAG_NAME}.tgz
            mv ${OUTPUT_NORFW} ${NORFW}
            echo NORFW=${NORFW} >> ${GITHUB_ENV}
          fi

          # NANDFW=$(find output/images -name openipc*nand*)
          # if [ -e ${NANDFW} ]; then
          #   echo NANDFW=${NANDFW} >> ${GITHUB_ENV}
          # fi

          # Generate bin firmware
          pushd output/images
          platform=${{matrix.platform}}
          soc=${platform%_*}

          uboot=u-boot-$soc-nor.bin
          ubootenv=u-boot-env-$soc-nor.bin
          kernel=uImage.$soc
          rootfs=rootfs.squashfs.$soc
          binnorfw=$(basename ${NORFW%.tgz}).bin

          # get u-boot
          link=https://github.com/openipc/firmware/releases/download/latest
          wget -nv $link/$uboot -O $uboot

          # make uboot env image and set env
          sudo apt update
          sudo apt install -y u-boot-tools
          mkenvimage -s 0x10000 -o $ubootenv /dev/null
          echo -e "$(readlink -f ${ubootenv})\t0\t0x10000\t0x10000\t0x1" > fw_env.config

          fw_setenv -c fw_env.config baseaddr '0x21000000'
          fw_setenv -c fw_env.config kernaddr '0x50000'
          fw_setenv -c fw_env.config kernsize '0x200000'
          fw_setenv -c fw_env.config rootaddr '0x250000'
          fw_setenv -c fw_env.config rootsize '0xa00000'
          fw_setenv -c fw_env.config rootmtd '10240k'
          fw_setenv -c fw_env.config bootargs 'console=ttyS0,115200 panic=20 root=/dev/mtdblock3 init=/init mtdparts=NOR_FLASH:256k(boot),64k(env),2048k(kernel),${rootmtd}(rootfs),-(rootfs_data) LX_MEM=${memlx} mma_heap=mma_heap_name0,miu=0,sz=${memsz} cma=2M'
          fw_setenv -c fw_env.config bootcmd 'setenv setargs setenv bootargs ${bootargs}; run setargs; sf probe 0; sf read ${baseaddr} ${kernaddr} ${kernsize}; bootm ${baseaddr}'
          fw_setenv -c fw_env.config bootcmdbak 'setenv bootcmd ${cmdnor}; sf probe 0; saveenv; run bootcmd'
          fw_setenv -c fw_env.config cmdnor 'sf probe 0; setenv setargs setenv bootargs ${bootargs}; run setargs; sf read ${baseaddr} ${kernaddr} ${kernsize}; bootm ${baseaddr}'

          fw_setenv -c fw_env.config ubnor '${updatetool} ${baseaddr} u-boot-${soc}-nor.bin && run ubwrite'
          fw_setenv -c fw_env.config uknor '${updatetool} ${baseaddr} uImage.${soc} && run ukwrite'
          fw_setenv -c fw_env.config urnor '${updatetool} ${baseaddr} rootfs.squashfs.${soc} && run urwrite'
          fw_setenv -c fw_env.config ubwrite 'sf probe 0; sf erase 0x0 ${kernaddr}; sf write ${baseaddr} 0x0 ${kernaddr}'
          fw_setenv -c fw_env.config ukwrite 'sf probe 0; sf erase ${kernaddr} ${kernsize}; sf write ${baseaddr} ${kernaddr} ${filesize}'
          fw_setenv -c fw_env.config urwrite 'sf probe 0; sf erase ${rootaddr} ${rootsize}; sf write ${baseaddr} ${rootaddr} ${filesize}'
          fw_setenv -c fw_env.config sdcard 'setenv updatetool fatload mmc 0'
          fw_setenv -c fw_env.config updatetool 'tftpboot'
          fw_setenv -c fw_env.config soc $soc

          fw_setenv -c fw_env.config ipaddr '192.168.1.10'
          fw_setenv -c fw_env.config serverip '192.168.1.254'
          fw_setenv -c fw_env.config netmask '255.255.255.0'

          # Generate bin firmware
          dd if=/dev/zero bs=1K count=5000 status=none | tr '\000' '\377' > ${binnorfw}
          dd if=${uboot} of=${binnorfw} bs=1K seek=0 conv=notrunc status=none
          dd if=${ubootenv} of=${binnorfw} bs=1K seek=256 conv=notrunc status=none
          dd if=${kernel} of=${binnorfw} bs=1K seek=320 conv=notrunc status=none
          dd if=${rootfs} of=${binnorfw} bs=1K seek=2368 conv=notrunc status=none
          popd

      - name: Upload test firmware to artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{matrix.platform}}
          path: output/images/openipc*nor*

      - name: Upload release firmware
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.TAG_NAME}}
          token: ${{ secrets.RELEASE_TOKEN }}
          files: |
            ${{env.NORFW}}
            output/images/openipc*.bin
